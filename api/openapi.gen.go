// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"time"
)

const (
	Pat_basicScopes  = "pat_basic.Scopes"
	Pat_bearerScopes = "pat_bearer.Scopes"
)

// Defines values for CertStatus.
const (
	Expired CertStatus = "expired"
	Online  CertStatus = "online"
	Revoked CertStatus = "revoked"
)

// Cert defines model for cert.
type Cert struct {
	// Algorithm Algorithm used to sign certificate
	Algorithm *interface{} `json:"algorithm,omitempty"`

	// CreatedAt UTC time when certificate was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Name name of certificate
	Name *string `json:"name,omitempty"`

	// Revision Current revision of certificate.
	Revision *int64 `json:"revision,omitempty"`

	// RevokedAt UTC time after which certificate was revoked.
	RevokedAt *time.Time `json:"revoked_at"`

	// Serial serial id for certificate.
	Serial *string `json:"serial,omitempty"`

	// Status current status of certificate.
	Status *CertStatus `json:"status,omitempty"`

	// TextualEncoding base64 textual encoding of certificate based on RFC7468.
	TextualEncoding *string `json:"textual_encoding,omitempty"`

	// ValidAfter UTC time after which certificate will be valid.
	ValidAfter *time.Time `json:"valid_after,omitempty"`

	// ValidBefore UTC time after which certificate will no longer be valid.
	ValidBefore *time.Time `json:"valid_before,omitempty"`
}

// CertStatus current status of certificate.
type CertStatus string

// Error defines model for error.
type Error struct {
	// Detail A human-readable description of this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Status HTTP status code of this occurrence of the problem.
	Status *int32 `json:"status,omitempty"`

	// Title A human-readable description of this problem type.
	Title *string `json:"title,omitempty"`

	// Type URI identifying problem.
	Type *string `json:"type,omitempty"`
}

// Root defines model for root.
type Root struct {
	Whoami *string `json:"whoami,omitempty"`
}

// PathOrgParam defines model for path_org_param.
type PathOrgParam = string

// PathRealmParam defines model for path_realm_param.
type PathRealmParam = string

// QueryCaParam defines model for query_ca_param.
type QueryCaParam = string

// GetCertsParams defines parameters for GetCerts.
type GetCertsParams struct {
	// CaParam ca for operation
	CaParam *QueryCaParam `form:"ca_param,omitempty" json:"ca_param,omitempty"`
}
